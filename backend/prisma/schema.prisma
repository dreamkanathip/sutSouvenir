// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  email      String      @unique
  password   String?
  firstName  String?
  lastName   String?
  picture    String?
  gender     String?
  role       Role        @default(USER)
  enabled    Boolean     @default(true)
  orders     Order[]
  carts      Cart[]
  dashboards Dashboard[] @relation("AdminDashboards")
  payments   Payment[]
  bookmarks  Bookmark[]
  addresses  Address[]   // New relation to Address model
  reviews    Review[]    // New relation to Review model
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}
model Address {
  id            Int      @id @default(autoincrement())
  firstName     String
  lastName      String
  phoneNumber   String
  street        String
  subDistrict   String
  district      String
  province      String
  postalCode    String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
model Product {
  id           Int              @id @default(autoincrement())
  title        String
  description  String
  price        Float
  sold         Int              @default(0)
  quantity     Int
  orderItems   ProductOnOrder[]
  cartItems    ProductOnCart[]
  images       Image[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  category     Category?        @relation(fields: [categoryId], references: [id])
  categoryId   Int?
  status       ProductStatus    @default(AVAILABLE)
  stockRecords StockRecord[]
  bookmarks    Bookmark[]       // New relation to Bookmark model
  reviews      Review[]         // New relation to Review model
}

model Bookmark {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
  createdAt  DateTime @default(now())
}

model Review {
  id         Int      @id @default(autoincrement())
  comment    String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
  star      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Order {
  id           Int              @id @default(autoincrement())
  products     ProductOnOrder[]
  cartTotal    Float
  orderStatus  OrderStatus      @default(NOT_PROCESSED)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  user    User             @relation(fields: [userId], references: [id])
  userId  Int
  payment      Payment?        
}

model Payment {
  id         Int       @id @default(autoincrement())
  amount     Float
  status     PaymentStatus @default(PENDING)
  order      Order     @relation(fields: [orderId], references: [id]) // One-to-one relationship with Order
  orderId    Int       @unique
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model ProductOnOrder {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  count     Int
  price     Float
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Cart {
  id          Int             @id @default(autoincrement())
  products    ProductOnCart[]
  cartTotal   Float
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  user   User            @relation(fields: [userId], references: [id])
  userId Int
}

model ProductOnCart {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float
}

model Image {
  id         Int      @id @default(autoincrement())
  asset_id   String
  public_id  String
  url        String
  secure_url String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
}

model Dashboard {
  id             Int           @id @default(autoincrement())
  title          String
  description    String?
  createdBy      User          @relation("AdminDashboards", fields: [createdById], references: [id])
  createdById    Int
  reports        Report[]
  stockRecords   StockRecord[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())
}

model Report {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  dashboard   Dashboard @relation(fields: [dashboardId], references: [id])
  dashboardId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model StockRecord {
  id            Int       @id @default(autoincrement())
  product       Product   @relation(fields: [productId], references: [id])
  productId     Int
  dashboard     Dashboard   @relation(fields: [dashboardId], references: [id])
  dashboardId     Int
  quantityAdded Int
  quantitySold  Int
  updatedAt     DateTime  @default(now())
}

// Enums for roles and statuses
enum Role {
  ADMIN
  USER
}

enum OrderStatus {
  NOT_PROCESSED
  PROCESSED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum ProductStatus {
  AVAILABLE
  OUT_OF_STOCK
  DISCONTINUED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}